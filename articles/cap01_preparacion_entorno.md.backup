# üìò Cap√≠tulo 01 ‚Äì Preparaci√≥n del Entorno

## üóÇ Estructura del directorio del proyecto local


```plaintext
Servidor_Byte_Path/
‚îú‚îÄ‚îÄ articulos_html
‚îú‚îÄ‚îÄ articulos_md
‚îÇ   ‚îú‚îÄ‚îÄ cap01_preparacion_entorno.md
‚îÇ   ‚îú‚îÄ‚îÄ cap02_seguridad_basica.md
‚îÇ   ‚îú‚îÄ‚îÄ cap03_servidor_web_apache.md
‚îÇ   ‚îú‚îÄ‚îÄ cap04_contenido_web_estatico.md
‚îÇ   ‚îú‚îÄ‚îÄ cap05_organizacion_y_multimedia.md
‚îÇ   ‚îú‚îÄ‚îÄ cap06_automatizacion_basica.md
‚îÇ   ‚îú‚îÄ‚îÄ cap07_seguridad_y_logs.md
‚îÇ   ‚îú‚îÄ‚îÄ cap08_despliegue_en_la_nube.md
‚îÇ   ‚îî‚îÄ‚îÄ cap09_mantenimiento_y_respaldo.md
‚îú‚îÄ‚îÄ control
‚îÇ   ‚îî‚îÄ‚îÄ control_imagenes.ods
‚îú‚îÄ‚îÄ documentacion
‚îÇ   ‚îú‚îÄ‚îÄ bitacora.md
‚îÇ   ‚îî‚îÄ‚îÄ emojis.md
‚îú‚îÄ‚îÄ herramientas
‚îú‚îÄ‚îÄ imagenes
‚îÇ   ‚îú‚îÄ‚îÄ optimizadas
‚îÇ   ‚îî‚îÄ‚îÄ originales
‚îÇ       ‚îî‚îÄ‚îÄ bit-01.png
‚îú‚îÄ‚îÄ logs
‚îî‚îÄ‚îÄ portada
```




> üìå **Recordatorio:** Explicar el porqu√© de esta estructura

## üñ• Instalaci√≥n de Debian 12  

Usar√© un mini-PC para el entorno de pruebas, una vez todo funciones correctamente se migrar√° a una instancia virtual en la nube, GCP o AWS.



La instalaci√≥n del sistema se realiz√≥ desde un USB, con Debian 12 sin entorno de escritorio. Una vez completada, lo primero fue poner el entorno en marcha:

1. Actualizaci√≥n inicial del sistema.

2. Instalaci√≥n de sudo y adici√≥n del usuario rubenrv al grupo de administradores:


<pre>apt install sudo
usermod -aG sudo rubenrv</pre>


3. Tras reiniciar, verifiqu√© con id rubenrv que el cambio se aplic√≥ correctamente.

4. Luego instal√© el servidor SSH (openssh-server) y comprob√© que estuviera activo y funcionando.


<pre>sudo systemctl status sshd</pre>

> üí° Todo listo para administrar el sistema de forma remota.



## üë§ Usuario, hostname y red

**Hostname:** 1-bytepath  
**Usuario:** rubenrv  
**IP:** 192.168.8.150/24  
**Red Local** 192.168.8.0/24  


## üîê Acceso remoto con SSH

Una vez verificado que el servicio SSH est√° activo y permite conexiones, es momento de reforzar la seguridad del sistema. Para ello, configuraremos el acceso √∫nicamente mediante clave p√∫blica y desactivaremos el acceso por contrase√±a.

1. Generar clave SSH (desde el cliente)  

[Generar clave](../imagenes/originales/cap01_ssh_keygen_01.png)  
-t ed25519: indica que se usar√° el algoritmo de clave ed25519.  
-C "rubenrv@bytepath": es un comentario opcional para ayudar a identificar la clave.  
Este comando crear√° dos archivos, la clave privada que no se compartir√° nunca y la p√∫blica que copiaremos en el servidor.

2. Copiar la clave p√∫blica en el servidor  

[Copiar clave](../imagenes/originales/cap01_ssh_keygen_01.png)  

Esto crear√° el archivo ~/.ssh/authorized_keys en el servidor (si no existe) y a√±adir√° la clave p√∫blica.  

3. Comprobar el acceso con la clave y sin pass  

[Comprobar clave](../imagenes/originales/cap01_chek-key_03.png)

4. Eliminar acceso al servidor con contrase√±a.  

[Editar ssd_config](../imagenes/originales/cap01_sshdconfig_04.png)

Con esta configuraci√≥n evitamos que se nadie pueda intentar conectarse con una pass. La √∫nica opci√≥n v√°lida es usar el equipo qeu tenga la clave privada.  

Por √∫ltimo reiniciamos el servicio ssh y comprobamos el estado del servicio.  

[Reiniciar servicio ssh](../imagenes/originales/cap01_restart_ssh_05.png)  











## üì¶ Paquetes b√°sicos
...

## üîÑ Actualizaci√≥n del sistema
...
